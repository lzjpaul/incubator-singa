name: "cifar10-convnet"
train_steps: 20000
test_steps: 1
test_freq: 10
validate_steps: 1
validate_freq: 10
disp_freq: 50
gpu: 0
#checkpoint_path: "examples/cifar10/checkpoint/step1000-worker0"
train_one_batch {
  alg: kBP
}
updater{
  type: kSGD
  weight_decay:0.004
  momentum:0.9
  learning_rate {
    type: kFixedStep
    fixedstep_conf:{
      step:0
      step:60000
      step:65000
      step_lr:0.001
      step_lr:0.0001
      step_lr:0.00001
    }
  }
}
#updater{
#  type: kSGD
#  learning_rate{
#    type : kStep
#    base_lr: 0.001
#    step_conf{
#      change_freq: 60
#      gamma: 0.997
#    }
#  }
#}
neuralnet {
  layer{
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "/data/zhaojing/cnn/NUHALLCOND/subsample1/train_data.bin"
      # mean_file: "examples/cifar10/image_mean.bin"
      batchsize: 100
      #random_skip: 5000
      shape: 1
      shape: 12
      shape: 1277
    }
    include: kTrain
  }
  layer{
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "/data/zhaojing/cnn/NUHALLCOND/subsample1/test_data.bin"
      # mean_file: "examples/cifar10/image_mean.bin"
      batchsize: 3000
      shape: 1
      shape: 12
      shape: 1277
    }
    include: kTest
  }
#  layer {
#    name: "data"
#    type: kRecordInput
#    store_conf {
#      backend: "kvfile"
#      path: "/data/zhaojing/cnn/NUHALLCOND/subsample1/train_data.bin"
#      random_skip: 5000
#      batchsize: 50
#      shape: 15324
#    }
#    include: kTrain
#  }

#  layer {
#    name: "data"
#    type: kRecordInput
#    store_conf {
#      backend: "kvfile"
#      path: "/data/zhaojing/cnn/NUHALLCOND/subsample1/test_data.bin"
#      batchsize: 100
#      shape: 15324
#      # std_value: 127.5
#      # mean_value: 127.5
#    }
#    include: kTest
#  }
  layer{
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "/data/zhaojing/cnn/NUHALLCOND/subsample1/valid_data.bin"
      # mean_file: "examples/cifar10/image_mean.bin"
      batchsize: 2000
      shape: 1
      shape: 12
      shape: 1277
    }
    include: kVal
  }
  layer {
    name: "ip1"
    type: kInnerProduct
    srclayers:"data"
    innerproduct_conf {
      num_output: 8000
    }
    param {
      name: "w4"
      # wd_scale:250
      init {
        # type:kGaussian
        # std:0.01
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
    param {
      name: "b4"
      # lr_scale:2.0
      # wd_scale:0
      init {
        # type: kConstant
        # value:0
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
  }
  # layer {
  #  name: "relu1"
  #  type: kCudnnActivation
  #  activation_conf {
  #    type: RELU
  #    # type: TANH
  #  }
  #  srclayers:"ip1"
  #}
  layer{
    name: "tanh1"
    type: kSTanh
    srclayers:"ip1"
  }
  layer {
    name: "ip2"
    type: kInnerProduct
    srclayers:"tanh1"
    innerproduct_conf {
      num_output: 2000
    }
    param {
      name: "w5"
      # wd_scale:250
      init {
        #type:kGaussian
        #std:0.01
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
    param {
      name: "b5"
      # lr_scale:2.0
      # wd_scale:0
      init {
        #type: kConstant
        #value:0
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
  }
  # layer {
  #  name: "relu1"
  #  type: kCudnnActivation
  #  activation_conf {
  #    type: RELU
  #    # type: TANH
  #  }
  #  srclayers:"ip1"
  #}
  layer{
    name: "tanh2"
    type: kSTanh
    srclayers:"ip2"
  }

  layer {
    name: "ip3"
    type: kInnerProduct
    # srclayers:"relu1"
    srclayers:"tanh2"
    innerproduct_conf {
      num_output: 2
    }
    param {
      name: "w6"
      # wd_scale:250
      init {
        #type:kGaussian
        #std:0.01
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
    param {
      name: "b6"
      # lr_scale:2.0
      # wd_scale:0
      init {
        #type: kConstant
        #value:0
        type: kUniform
        low:-0.05
        high:0.05
      }
    }
  }
  layer {
   name : "softmax"
   type: kCudnnSoftmax
   srclayers: "ip3"
   include: kTest
  }

  layer {
   name : "accuracy"
   type: kAccuracy
   srclayers: "softmax"
   srclayers: "data"
   include: kTest
  }
  layer{
    name: "loss"
    type: kSoftmaxLoss
    srclayers:"ip3"
    srclayers: "data"
    include : kTrain
  }
# uncomment "softmax", "argsort", "output" layer and comment "loss" layer
# to extract features from argsort
#  layer {
#    name : "output"
#    type: kCSVOutput
#    srclayers: "argsort"
#    store_conf {
#      path: "examples/cifar10/out.csv"
#    }
#  }
}
cluster {
  nworker_groups: 1
  nserver_groups: 1
  nworkers_per_group: 1
  nworkers_per_procs: 1
  workspace: "examples/CMSHF-CNN-MLP"
}

cluster {
  nworker_groups: 1
  nserver_groups: 1
  workspace: "examples/cifar10"
}
model {
  name: "cifar10-convnet"
  display_frequency: 200
  train_steps: 30000
  updater {
    type: kSGD
    lr_change: kFixedStep
    weight_decay: 0.004
    fixedstep_conf {
    }
  }
  alg: kBackPropagation
  neuralnet {
    layer {
      name: "data"
      exclude: kTest
      type: kShardData
      sharddata_conf {
        path: "examples/cifar10/cifar10_train_shard"
        batchsize: 16
        random_skip: 5000
      }
    }
    layer {
      name: "data"
      exclude: kTrain
      type: kShardData
      sharddata_conf {
        path: "examples/cifar10/cifar10_test_shard"
        batchsize: 100
      }
    }
    layer {
      name: "rgb"
      srclayers: "data"
      type: kRGBImage
      rgbimage_conf {
        meanfile: "examples/cifar10/image_mean.bin"
      }
    }
    layer {
      name: "label"
      srclayers: "data"
      vis: true
      type: kLabel
    }
    layer {
      name: "conv1"
      srclayers: "rgb"
      param {
        std: 0.0001
        learning_rate_multiplier: 1.0
        vis: true
        name: "w1"
      }
      param {
        init_method: kConstant
        value: 0
        learning_rate_multiplier: 2.0
        name: "b1"
      }
      type: kConvolution
      convolution_conf {
        num_filters: 32
        kernel: 5
        pad: 2
      }
    }
    layer {
      name: "pool1"
      srclayers: "conv1"
      type: kPooling
      pooling_conf {
        kernel: 3
        stride: 2
      }
    }
    layer {
      name: "relu1"
      srclayers: "pool1"
      type: kReLU
    }
    layer {
      name: "norm1"
      srclayers: "relu1"
      type: kLRN
      lrn_conf {
        local_size: 3
        alpha: 5e-05
        norm_region: WITHIN_CHANNEL
      }
    }
    layer {
      name: "conv2"
      srclayers: "norm1"
      param {
        std: 0.01
        learning_rate_multiplier: 1.0
        name: "w2"
      }
      param {
        init_method: kConstant
        value: 0
        learning_rate_multiplier: 2.0
        name: "b2"
      }
      type: kConvolution
      convolution_conf {
        num_filters: 32
        kernel: 5
        pad: 2
      }
    }
    layer {
      name: "relu2"
      srclayers: "conv2"
      type: kReLU
    }
    layer {
      name: "pool2"
      srclayers: "relu2"
      type: kPooling
      pooling_conf {
        kernel: 3
        stride: 2
      }
    }
    layer {
      name: "norm2"
      srclayers: "pool2"
      type: kLRN
      lrn_conf {
        local_size: 3
        alpha: 5e-05
        norm_region: WITHIN_CHANNEL
      }
    }
    layer {
      name: "conv3"
      srclayers: "norm2"
      param {
        std: 0.01
        name: "w3"
      }
      param {
        init_method: kConstant
        value: 0
        name: "b3"
      }
      type: kConvolution
      convolution_conf {
        num_filters: 64
        kernel: 5
        pad: 2
      }
    }
    layer {
      name: "relu3"
      srclayers: "conv3"
      type: kReLU
    }
    layer {
      name: "pool3"
      srclayers: "relu3"
      type: kPooling
      pooling_conf {
        kernel: 3
        pool: AVE
        stride: 2
      }
    }
    layer {
      name: "ip1"
      srclayers: "pool3"
      param {
        std: 0.01
        learning_rate_multiplier: 1.0
        weight_decay_multiplier: 250
        name: "w4"
      }
      param {
        init_method: kConstant
        value: 0
        learning_rate_multiplier: 2.0
        weight_decay_multiplier: 0
        name: "b4"
      }
      vis: true
      type: kInnerProduct
      innerproduct_conf {
        num_output: 10
      }
    }
    layer {
      name: "loss"
      srclayers: "ip1"
      srclayers: "label"
      type: kSoftmaxLoss
      softmaxloss_conf {
      }
    }
  }
  test_steps: 100
  test_frequency: 1000
  vis_frequency: 2000
  vis_samples: 2000
  vis_after: 50
}

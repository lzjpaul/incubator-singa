# For the weight, remember to adjust to 1/n (1/3, 1/2...)
# For the pre-sigmoid, deducted 0.5
name: "deep-big-simple-mlp"
train_steps: 10000
test_steps:5
test_frequency:20
display_frequency:10
debug: true
alg: kBackPropagation
updater{
  base_lr: 0.001
  lr_change: kStep
  type: kSGD
  step_conf{
    change_freq: 60
    gamma: 0.997
  }
}

neuralnet {
layer {
  name: "data"
  type: kShardData
  sharddata_conf {
    path: "examples/SynPUF/Readmission_multisrc_downtrain_shard"
    batchsize: 1000
  }
  exclude: kTest
}

layer {
  name: "data"
  type: kShardData
  sharddata_conf {
    path: "examples/SynPUF/Readmission_multisrc_downtest_shard"
    batchsize: 1000
  }
  exclude: kTrain
}

layer{
  name:"MultisrcData"
  type: kMultiSrcData
  srclayers: "data"
  multisrcdata_conf{
    diag_dim: 12434
    proc_dim: 7093
    demo_dim: 34
  }
}

layer{
  name: "label"
  type: kLabel
  srclayers: "data"
}

layer{
  name: "Diagnosis"
  type: kInnerProduct
  srclayers:"MultisrcData"
  innerproduct_conf{
    num_output: 2000
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Diagtanh1"
  type: kTanh
  srclayers:"Diagnosis"
}

layer{
  name: "Diagfc2"
  type: kInnerProduct
  srclayers:"Diagtanh1"
  innerproduct_conf{
    num_output: 2
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "DiagProb"
  type:kSoftmaxProb
  srclayers:"Diagfc2"
}

layer{
  name: "Procedure"
  type: kInnerProduct
  srclayers:"MultisrcData"
  innerproduct_conf{
    num_output: 500
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Proctanh1"
  type: kTanh
  srclayers:"Procedure"
}

layer{
  name: "Procfc2"
  type: kInnerProduct
  srclayers:"Proctanh1"
  innerproduct_conf{
    num_output: 2
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "ProcProb"
  type:kSoftmaxProb
  srclayers:"Procfc2"
}

layer{
  name: "Demographics"
  type: kInnerProduct
  srclayers:"MultisrcData"
  innerproduct_conf{
    num_output: 15
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Demotanh1"
  type: kTanh
  srclayers:"Demographics"
}

layer{
  name: "Demofc2"
  type: kInnerProduct
  srclayers:"Demotanh1"
  innerproduct_conf{
    num_output: 2
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "DemoProb"
  type:kSoftmaxProb
  srclayers:"Demofc2"
}

layer{
  name: "multisrcsingle"
  type: kMultiSrcSingle
  srclayers:"DiagProb"
  srclayers:"ProcProb"
  srclayers:"DemoProb"
  multisrcsingle_conf{
    num_output: 1
  }
  param{
    name: "weight"
    init_method: kConstant
    #init_method: kArbitary
    value: 0.33
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "loss"
  type:kLogisticLoss
  srclayers:"multisrcsingle"
  srclayers:"label"
}
}

name: "deep-big-simple-mlp"
train_steps: 13002
test_steps:25
test_frequency:2000
display_frequency:50
debug: true
alg: kBackPropagation
updater{
  base_lr: 0.1
  weight_decay:0.01
  lr_change: kStep
  type: kSGD
  step_conf{
    change_freq: 60
    gamma: 0.997
  }
}

neuralnet {
layer {
  name: "data"
  type: kShardData
  sharddata_conf {
    path: "/data/zhaojing/SynPUF/SynPUF_2009_Carrier_Claims_train"
    batchsize: 1000
  }
  exclude: kTest
}

layer {
  name: "data"
  type: kShardData
  sharddata_conf {
    path: "/data/zhaojing/SynPUF/SynPUF_2009_Carrier_Claims_test"
    batchsize: 1000
  }
  exclude: kTrain
}

layer{
  name:"MultisrcData"
  type: kMultiSrcData
  srclayers: "data"
  multisrcdata_conf{
    diag_dim: 12434
    proc_dim: 7093
    demo_dim: 33
  }
}

layer{
  name: "label"
  type: kLabel
  srclayers: "data"
}

layer{
  name: "Diagnosis"
  type: kInnerProduct
  srclayers:"MultisrcData"
  innerproduct_conf{
    num_output: 7000
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Diagtanh"
  type: kTanh
  srclayers:"Diagnosis"
}

layer{
  name: "Diagfc1"
  type: kInnerProduct
  srclayers:"Diagtanh"
  innerproduct_conf{
    num_output: 2000
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Diagtanh1"
  type: kTanh
  srclayers:"Diagfc1"
}

layer{
  name: "Procedure"
  type: kInnerProduct
  srclayers:"MultisrcData"
  innerproduct_conf{
    num_output: 2000
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Proctanh"
  type: kTanh
  srclayers:"Procedure"
}

layer{
  name: "Procand"
  type: kMultiSrcInnerProduct
  srclayers:"Diagtanh1"
  srclayers:"Proctanh"
  multisrcinnerproduct_conf{
    num_output: 500
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "weight1"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Procandtanh"
  type: kTanh
  srclayers:"Procand"
}

layer{
  name: "Procandfc1"
  type: kInnerProduct
  srclayers:"Procandtanh"
  innerproduct_conf{
    num_output: 20
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Procandtanh1"
  type: kTanh
  srclayers:"Procandfc1"
}

layer{
  name: "Demographics"
  type: kInnerProduct
  srclayers:"MultisrcData"
  innerproduct_conf{
    num_output: 20
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "Demotanh"
  type: kTanh
  srclayers:"Demographics"
}

layer{
  name: "Demoand"
  type: kMultiSrcInnerProduct
  srclayers:"Procandtanh1"
  srclayers:"Demotanh"
  multisrcinnerproduct_conf{
    num_output: 2
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "weight1"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "loss"
  type:kSoftmaxLoss
  softmaxloss_conf{
    topk:1
  }
  srclayers:"Demoand"
  srclayers:"label"
}
}

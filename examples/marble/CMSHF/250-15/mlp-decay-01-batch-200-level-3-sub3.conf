# For the weight, remember to adjust to 1/n (1/3, 1/2...)
# For the pre-sigmoid, deducted 0.5
name: "deep-big-simple-mlp"
train_steps: 802
test_steps:1
validation_steps:1
test_frequency:10
validation_frequency:10
display_frequency:10
debug: true
alg: kBackPropagation
updater{
  base_lr: 0.1
  weight_decay:1
  lr_change: kStep
  type: kSGD
  step_conf{
    change_freq: 60
    gamma: 0.997
  }
}

neuralnet {
layer {
  name: "data"
  type: kShardData
  sharddata_conf {
    path: "/data/zhaojing/marble/CMSHF/mlp-subsamples/subsample3/CMS_HF_VECTOR_DIAG_LAB_COOCCUR_train_shard_3"
    batchsize: 200
  }
  exclude: kTest
  exclude: kValidation
}

layer {
  name: "data"
  type: kShardData
  sharddata_conf {
    path: "/data/zhaojing/marble/CMSHF/mlp-subsamples/subsample3/CMS_HF_VECTOR_DIAG_LAB_COOCCUR_test_shard_3"
    batchsize: 240
  }
  exclude: kTrain
  exclude: kValidation
}

layer {
  name: "data"
  type: kShardData
  sharddata_conf {
    path: "/data/zhaojing/marble/CMSHF/mlp-subsamples/subsample3/CMS_HF_VECTOR_DIAG_LAB_COOCCUR_valid_shard_3"
    batchsize: 156
  }
  exclude: kTrain
  exclude: kTest
}

layer{
  name:"MultisrcFData"
  type: kMultiSrcFData
  srclayers: "data"
  multisrcfdata_conf{
    diag_dim: 318
    proc_dim: 239
  }
}

layer{
  name: "flabel"
  type: kFLabel
  srclayers: "data"
}

layer{
  name: "AllSources"
  type: kInnerProduct
  srclayers:"MultisrcFData"
  innerproduct_conf{
    num_output: 250
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}
# stanh ?????
layer{
  name: "tanh"
  type: kTanh
  srclayers:"AllSources"
}

layer{
  name: "fc1"
  type: kInnerProduct
  srclayers:"tanh"
  innerproduct_conf{
    num_output: 125
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "tanh1"
  type: kTanh
  srclayers:"fc1"
}

layer{
  name: "fc2"
  type: kInnerProduct
  srclayers:"tanh1"
  innerproduct_conf{
    num_output: 60
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "tanh2"
  type: kTanh
  srclayers:"fc2"
}

layer{
  name: "fc3"
  type: kInnerProduct
  srclayers:"tanh2"
  innerproduct_conf{
    num_output: 1
  }
  param{
    name: "weight"
    init_method: kUniformSqrtFanInOut
    low:-2.45
    high:2.45
  }
  param{
    name: "bias"
    init_method: kConstant
    value: 0.0
  }
}

layer{
  name: "loss"
  type:kLogisticLoss
  srclayers:"fc3"
  srclayers:"flabel"
}
}
